import os

webrtc_code_path = os.environ['ALPHARTC_DIR']
webrtc_lib_path = os.path.join(webrtc_code_path, 'out', 'Default', 'obj')
webrtc_absl_path = os.path.join(webrtc_code_path, 'third_party', 'abseil-cpp')

def configure(conf):
  conf.env['ENABLE_webrtc'] = conf.check(
    mandatory=True,
    libpath = [webrtc_lib_path],
    includes = [
      webrtc_code_path,
      webrtc_absl_path],
    lib=[
      'webrtc',
      'dl',
      'zmq'],
    uselib_store = 'libwebrtc')
  conf.env.append_value("CXXFLAGS", [
    "-std=c++14",
    "-I" + webrtc_code_path,
    "-I" + webrtc_absl_path,
    "-Wno-unused-const-variable",
    "-Wno-unused-private-field",
    ])

def build(bld):
    module= bld.create_ns3_module('ex-webrtc')
    module.env.append_value("CXXFLAGS", [
      "-D__STDC_CONSTANT_MACROS",
      "-DWEBRTC_POSIX",
      "-DWEBRTC_LINUX",
      '-DGYM'])
    module.env.append_value("LIB", ["webrtc", "dl", "zmq"])
    module.source = [
      'model/simulated-process-thread.cc',
      'model/simulated-task-queue.cc',
      'model/simulated-thread.cc',
      'model/webrtc-config.cc',
      'model/webrtc-receiver.cc',
      'model/webrtc-sender.cc',
      'model/webrtc-clock.cc',
      'model/webrtc-emu-controller.cc',
      'model/webrtc-simu-controller.cc',
      'model/webrtc-trace.cc',
      'api/test/create_frame_generator.cc',
      'api/test/network_emulation/network_emulation_interfaces.cc',
      'modules/congestion_controller/pcc/pcc_factory.cc',
      'modules/congestion_controller/pcc/pcc_network_controller.cc',
      'modules/congestion_controller/pcc/bitrate_controller.cc',
      'modules/congestion_controller/pcc/rtt_tracker.cc',
      'modules/congestion_controller/pcc/utility_function.cc',
      'modules/congestion_controller/pcc/monitor_interval.cc',
      'modules/congestion_controller/goog_cc/acknowledged_bitrate_estimator_interface.cc',
      'modules/congestion_controller/goog_cc/acknowledged_bitrate_estimator.cc',
      'modules/congestion_controller/goog_cc/alr_detector.cc',
      'modules/congestion_controller/goog_cc/bitrate_estimator.cc',
      'modules/congestion_controller/goog_cc/congestion_window_pushback_controller.cc',
      'modules/congestion_controller/goog_cc/delay_based_bwe.cc',
      'modules/congestion_controller/goog_cc/goog_cc_network_control.cc',
      'modules/congestion_controller/goog_cc/link_capacity_estimator.cc',
      'modules/congestion_controller/goog_cc/loss_based_bandwidth_estimation.cc',
      'modules/congestion_controller/goog_cc/probe_bitrate_estimator.cc',
      'modules/congestion_controller/goog_cc/probe_controller.cc',
      'modules/congestion_controller/goog_cc/robust_throughput_estimator.cc',
      'modules/congestion_controller/goog_cc/send_side_bandwidth_estimation.cc',
      'modules/congestion_controller/goog_cc/trendline_estimator.cc',
      'modules/remote_bitrate_estimator/aimd_rate_control.cc',
      'api/transport/goog_cc_factory.cc',
      'test/encoder_settings.cc',
      'test/fake_decoder.cc',
      'test/fake_encoder.cc',
      'test/fake_vp8_decoder.cc',
      'test/fake_vp8_encoder.cc',
      'test/field_trial.cc',
      'test/frame_forwarder.cc',
      'test/frame_generator.cc',
      'test/frame_generator_capturer.cc',
      'test/frame_utils.cc',
      'modules/congestion_controller/goog_cc/test/goog_cc_printer.cc',
      'test/rtp_header_parser.cc',
      'rtc_base/task_queue_for_test.cc',
      'test/test_video_capturer.cc',
      'test/logging/file_log_writer.cc',
      'test/logging/log_writer.cc',
      'test/scenario/call_client.cc',
      'test/scenario/column_printer.cc',
      'test/scenario/hardware_codecs.cc',
      'test/scenario/network_node.cc',
      'test/scenario/performance_stats.cc',
      'test/scenario/scenario_config.cc',
      'test/scenario/stats_collection.cc',
      'test/scenario/video_frame_matcher.cc',
      'test/scenario/video_stream.cc',
      'test/testsupport/file_utils.cc',
      'test/testsupport/file_utils_override.cc',
      'test/testsupport/ivf_video_frame_generator.cc',
    ]
    headers = bld(features='ns3header')
    headers.module = 'ex-webrtc'
    headers.source = [
      'model/webrtc-config.h',
      'model/webrtc-defines.h',
      'model/webrtc-receiver.h',
      'model/webrtc-sender.h',
      'model/webrtc-clock.h',
      'model/webrtc-emu-controller.h',
      'model/webrtc-trace.h',
    ]
    module.use.append("libwebrtc")
